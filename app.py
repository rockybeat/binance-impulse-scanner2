import streamlit as st
import requests
import pandas as pd
from datetime import datetime, timedelta

BINANCE_FUTURES_URL = "https://fapi.binance.com"

def get_futures_symbols():
    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–∞–º–ø–æ–≤
    return ["MOODENGUSDT", "PARTIUSDT", "DEGENUSDT", "PNUTUSDT", "KATOUUSDT", "FAIRUSDT"]

def get_daily_kline(symbol, date):
    start_ts = int(datetime.strptime(date, "%Y-%m-%d").timestamp() * 1000)
    end_ts = int((datetime.strptime(date, "%Y-%m-%d") + timedelta(days=1)).timestamp() * 1000)
    url = f"{BINANCE_FUTURES_URL}/fapi/v1/klines?symbol={symbol}&interval=1d&startTime={start_ts}&endTime={end_ts}"
    
    st.write(f"üì° –ó–∞–ø—Ä–æ—Å –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {symbol} ({date})")
    try:
        response = requests.get(url)
        data = response.json()
        st.write(f"üîÅ –û—Ç–≤–µ—Ç: {data}")
        
        if not data or isinstance(data, dict):
            return None
        
        open_price = float(data[0][1])
        close_price = float(data[0][4])
        pct_change = (close_price - open_price) / open_price * 100
        return pct_change
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π –¥–ª—è {symbol} ‚Äî {e}")
        return None

def run_analysis(start_date, end_date):
    symbols = get_futures_symbols()
    st.write(f"üß™ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(symbols)} –º–æ–Ω–µ—Ç —Å {start_date} –ø–æ {end_date}")
    
    results = []
    date_range = pd.date_range(start=start_date, end=end_date)

    for date in date_range:
        date_str = date.strftime("%Y-%m-%d")
        st.write(f"üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã: {date_str}")
        for symbol in symbols:
            change = get_daily_kline(symbol, date_str)
            if change is not None:
                st.write(f"‚û°Ô∏è {symbol} –¥–∞–ª {change:.2f}%")
                results.append({
                    "Symbol": symbol,
                    "Date": date_str,
                    "Daily Growth %": round(change, 2)
                })
            else:
                results.append({
                    "Symbol": symbol,
                    "Date": date_str,
                    "Daily Growth %": "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                })
    return pd.DataFrame(results)

# --- Streamlit UI ---
st.title("üß™ Binance Impulse Debugger (FIXED LIST)")
st.markdown("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç –Ω–∞ –¥–Ω–µ–≤–Ω–æ–π —Ä–æ—Å—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å API Binance.")

start_date = st.date_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", datetime(2025, 5, 5))
end_date = st.date_input("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", datetime(2025, 5, 7))

if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É"):
    with st.spinner("–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å Binance..."):
        df = run_analysis(start_date.strftime("%Y-%m-%d"), end_date.strftime("%Y-%m-%d"))
        if not df.empty:
            st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π.")
            st.dataframe(df)
            st.download_button("üì• –°–∫–∞—á–∞—Ç—å –∫–∞–∫ CSV", df.to_csv(index=False), file_name="binance_debug.csv")
        else:
            st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–æ–Ω–µ—Ç–∞–º.")
